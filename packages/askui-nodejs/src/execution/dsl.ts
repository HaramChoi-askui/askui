/* eslint-disable @typescript-eslint/no-use-before-define */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable max-classes-per-file */
// Autogenerated from typescript.template file

// TODO: Split this in multiple files

import { CustomElementJson } from '../core/model/test-case-dto/custom-element-json';
import { TestStepResultDto } from '../core/model/test-case-result-dto';

enum Timeunit { }

// LITERALS
type PC_KEYS = 'backspace' | 'delete' | 'enter' | 'tab' | 'escape' | 'up' | 'down' | 'right' | 'left' | 'home' | 'end' | 'pageup' | 'pagedown' | 'f1' | 'f2' | 'f3' | 'f4' | 'f5' | 'f6' | 'f7' | 'f8' | 'f9' | 'f10' | 'f11' | 'f12' | 'space' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '!' | '"' | '#' | '$' | '%' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '[' | '\\' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~ ';
type ANDROID_KEYS = 'home' | 'back' | 'call' | 'endcall' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'star' | 'pound' | 'dpad_up' | 'dpad_down' | 'dpad_left' | 'dpad_right' | 'dpad_center' | 'volume_up' | 'volume_down' | 'power' | 'camera' | 'clear' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'comma' | 'period' | 'alt_left' | 'alt_right' | 'shift_left' | 'shift_right' | 'tab' | 'space' | 'sym' | 'explorer' | 'envelope' | 'enter' | 'del' | 'grave' | 'minus' | 'equals' | 'left_bracket' | 'right_bracket' | 'backslash' | 'semicolon' | 'apostrophe' | 'slash' | 'at' | 'num' | 'headsethook' | 'focus' | 'plus' | 'menu' | 'notification' | 'search' | 'media_play_pause' | 'media_stop' | 'media_next' | 'media_previous' | 'media_rewind' | 'media_fast_forward' | 'mute' | 'page_up' | 'page_down' | 'switch_charset' | 'escape' | 'forward_del' | 'ctrl_left' | 'ctrl_right' | 'caps_lock' | 'scroll_lock' | 'function' | 'break' | 'move_home' | 'move_end' | 'insert' | 'forward' | 'media_play' | 'media_pause' | 'media_close' | 'media_eject' | 'media_record' | 'f1' | 'f2' | 'f3' | 'f4' | 'f5' | 'f6' | 'f7' | 'f8' | 'f9' | 'f10' | 'f11' | 'f12' | 'num_lock' | 'numpad_0' | 'numpad_1' | 'numpad_2' | 'numpad_3' | 'numpad_4' | 'numpad_5' | 'numpad_6' | 'numpad_7' | 'numpad_8' | 'numpad_9' | 'numpad_divide' | 'numpad_multiply' | 'numpad_subtract' | 'numpad_add' | 'numpad_dot' | 'numpad_comma' | 'numpad_enter' | 'numpad_equals' | 'numpad_left_paren' | 'numpad_right_paren' | 'volume_mute' | 'info' | 'channel_up' | 'channel_down' | 'zoom_in' | 'zoom_out' | 'window' | 'guide' | 'bookmark' | 'captions' | 'settings' | 'app_switch' | 'language_switch' | 'contacts' | 'calendar' | 'music' | 'calculator' | 'assist' | 'brightness_down' | 'brightness_up' | 'media_audio_track' | 'sleep' | 'wakeup' | 'pairing' | 'media_top_menu' | 'last_channel' | 'tv_data_service' | 'voice_assist' | 'help' | 'navigate_previous' | 'navigate_next' | 'navigate_in' | 'navigate_out' | 'dpad_up_left' | 'dpad_down_left' | 'dpad_up_right' | 'dpad_down_right' | 'media_skip_forward' | 'media_skip_backward' | 'media_step_forward' | 'media_step_backward' | 'soft_sleep' | 'cut' | 'copy' | 'paste' | 'all_apps' | 'refresh';
type MODIFIER_KEYS = 'command' | 'alt' | 'control' | 'shift' | 'right_shift';
type COLOR = 'black' | 'white' | 'red' | 'green' | 'yellow green' | 'orange' | 'yellow' | 'purple' | 'pink' | 'gray' | 'lime green' | 'royal blue';
type PC_AND_MODIFIER_KEYS = 'command' | 'alt' | 'control' | 'shift' | 'right_shift' | 'backspace' | 'delete' | 'enter' | 'tab' | 'escape' | 'up' | 'down' | 'right' | 'left' | 'home' | 'end' | 'pageup' | 'pagedown' | 'f1' | 'f2' | 'f3' | 'f4' | 'f5' | 'f6' | 'f7' | 'f8' | 'f9' | 'f10' | 'f11' | 'f12' | 'space' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '!' | '"' | '#' | '$' | '%' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '[' | '\\' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~ ';

// Helper
function commandStringBuilder(
  elm: FluentCommand | FluentFilters | FluentFiltersCondition,
  currentInstruction = '',
  oldCustomElement: CustomElementJson[] = [],
): Promise<TestStepResultDto> {
  const newCurrentInstruction = `${elm.textStr} ${currentInstruction}`;
  if ((elm instanceof FluentFilters
    || elm instanceof FluentFiltersCondition)
    && elm.customElements !== undefined) {
    oldCustomElement.push(elm.customElements);
  }
  if (elm instanceof FluentCommand) {
    return elm.exec(newCurrentInstruction, oldCustomElement);
  }
  return commandStringBuilder(elm.prev, newCurrentInstruction, oldCustomElement);
}

class Exec {
  constructor(private prev: FluentCommand | FluentFiltersOrRelationsCondition) { }

  exec(): Promise<TestStepResultDto> {
    return commandStringBuilder(this.prev);
  }
}

// Filters

export class FluentFilters {
  textStr = '';

  customElements?: CustomElementJson;

  constructor(public prev: FluentCommand | FluentFilters | FluentFiltersOrRelations) { }

  customElement(customElement: CustomElementJson) {
    this.textStr = 'custom element';
    if (customElement.name !== undefined) {
      this.textStr = `custom element with text "${customElement.name}"`;
    }
    this.customElements = customElement;
    return new FluentFiltersOrRelations(this);
  }

  wizardItemActive() {
    this.textStr = 'wizard item active';
    return new FluentFiltersOrRelations(this);
  }

  wizardItem() {
    this.textStr = 'wizard item';
    return new FluentFiltersOrRelations(this);
  }

  wizard() {
    this.textStr = 'wizard';
    return new FluentFiltersOrRelations(this);
  }

  windowsBar() {
    this.textStr = 'windows bar';
    return new FluentFiltersOrRelations(this);
  }

  window() {
    this.textStr = 'window';
    return new FluentFiltersOrRelations(this);
  }

  video() {
    this.textStr = 'video';
    return new FluentFiltersOrRelations(this);
  }

  url() {
    this.textStr = 'url';
    return new FluentFiltersOrRelations(this);
  }

  tooltip() {
    this.textStr = 'tooltip';
    return new FluentFiltersOrRelations(this);
  }

  textfield() {
    this.textStr = 'textfield';
    return new FluentFiltersOrRelations(this);
  }

  textarea() {
    this.textStr = 'textarea';
    return new FluentFiltersOrRelations(this);
  }

  text() {
    this.textStr = 'text';
    return new FluentFiltersOrRelations(this);
  }

  tableRow() {
    this.textStr = 'table row';
    return new FluentFiltersOrRelations(this);
  }

  tableHeader() {
    this.textStr = 'table header';
    return new FluentFiltersOrRelations(this);
  }

  tableColumn() {
    this.textStr = 'table column';
    return new FluentFiltersOrRelations(this);
  }

  table() {
    this.textStr = 'table';
    return new FluentFiltersOrRelations(this);
  }

  tabSelected() {
    this.textStr = 'tab selected';
    return new FluentFiltersOrRelations(this);
  }

  tabBar() {
    this.textStr = 'tab bar';
    return new FluentFiltersOrRelations(this);
  }

  tabActive() {
    this.textStr = 'tab active';
    return new FluentFiltersOrRelations(this);
  }

  tab() {
    this.textStr = 'tab';
    return new FluentFiltersOrRelations(this);
  }

  switchEnabled() {
    this.textStr = 'switch enabled';
    return new FluentFiltersOrRelations(this);
  }

  switchDisabled() {
    this.textStr = 'switch disabled';
    return new FluentFiltersOrRelations(this);
  }

  statusBar() {
    this.textStr = 'status bar';
    return new FluentFiltersOrRelations(this);
  }

  sliderIndicator() {
    this.textStr = 'slider indicator';
    return new FluentFiltersOrRelations(this);
  }

  slider() {
    this.textStr = 'slider';
    return new FluentFiltersOrRelations(this);
  }

  sidebar() {
    this.textStr = 'sidebar';
    return new FluentFiltersOrRelations(this);
  }

  scrollBar() {
    this.textStr = 'scroll bar';
    return new FluentFiltersOrRelations(this);
  }

  rect() {
    this.textStr = 'rect';
    return new FluentFiltersOrRelations(this);
  }

  recaptcha() {
    this.textStr = 'recaptcha';
    return new FluentFiltersOrRelations(this);
  }

  rate() {
    this.textStr = 'rate';
    return new FluentFiltersOrRelations(this);
  }

  radioButtonUnselected() {
    this.textStr = 'radio button unselected';
    return new FluentFiltersOrRelations(this);
  }

  radioButtonSelected() {
    this.textStr = 'radio button selected';
    return new FluentFiltersOrRelations(this);
  }

  progressbar() {
    this.textStr = 'progressbar';
    return new FluentFiltersOrRelations(this);
  }

  progressBar() {
    this.textStr = 'progress bar';
    return new FluentFiltersOrRelations(this);
  }

  popover() {
    this.textStr = 'popover';
    return new FluentFiltersOrRelations(this);
  }

  pil() {
    this.textStr = 'pil';
    return new FluentFiltersOrRelations(this);
  }

  password() {
    this.textStr = 'password';
    return new FluentFiltersOrRelations(this);
  }

  pager() {
    this.textStr = 'pager';
    return new FluentFiltersOrRelations(this);
  }

  navigationBar() {
    this.textStr = 'navigation bar';
    return new FluentFiltersOrRelations(this);
  }

  mouseText() {
    this.textStr = 'mouse text';
    return new FluentFiltersOrRelations(this);
  }

  mousePointer() {
    this.textStr = 'mouse pointer';
    return new FluentFiltersOrRelations(this);
  }

  mouseCursor() {
    this.textStr = 'mouse cursor';
    return new FluentFiltersOrRelations(this);
  }

  modal() {
    this.textStr = 'modal';
    return new FluentFiltersOrRelations(this);
  }

  messageBox() {
    this.textStr = 'message box';
    return new FluentFiltersOrRelations(this);
  }

  map() {
    this.textStr = 'map';
    return new FluentFiltersOrRelations(this);
  }

  logo() {
    this.textStr = 'logo';
    return new FluentFiltersOrRelations(this);
  }

  link() {
    this.textStr = 'link';
    return new FluentFiltersOrRelations(this);
  }

  keyboard() {
    this.textStr = 'keyboard';
    return new FluentFiltersOrRelations(this);
  }

  image() {
    this.textStr = 'image';
    return new FluentFiltersOrRelations(this);
  }

  icon() {
    this.textStr = 'icon';
    return new FluentFiltersOrRelations(this);
  }

  header() {
    this.textStr = 'header';
    return new FluentFiltersOrRelations(this);
  }

  footer() {
    this.textStr = 'footer';
    return new FluentFiltersOrRelations(this);
  }

  flag() {
    this.textStr = 'flag';
    return new FluentFiltersOrRelations(this);
  }

  dropdownMenu() {
    this.textStr = 'dropdown menu';
    return new FluentFiltersOrRelations(this);
  }

  dropdown() {
    this.textStr = 'dropdown';
    return new FluentFiltersOrRelations(this);
  }

  divider() {
    this.textStr = 'divider';
    return new FluentFiltersOrRelations(this);
  }

  circle() {
    this.textStr = 'circle';
    return new FluentFiltersOrRelations(this);
  }

  checkboxUnchecked() {
    this.textStr = 'checkbox unchecked';
    return new FluentFiltersOrRelations(this);
  }

  checkboxChecked() {
    this.textStr = 'checkbox checked';
    return new FluentFiltersOrRelations(this);
  }

  chartPie() {
    this.textStr = 'chart pie';
    return new FluentFiltersOrRelations(this);
  }

  chart() {
    this.textStr = 'chart';
    return new FluentFiltersOrRelations(this);
  }

  card() {
    this.textStr = 'card';
    return new FluentFiltersOrRelations(this);
  }

  button() {
    this.textStr = 'button';
    return new FluentFiltersOrRelations(this);
  }

  browserBar() {
    this.textStr = 'browser bar';
    return new FluentFiltersOrRelations(this);
  }

  breadcrumb() {
    this.textStr = 'breadcrumb';
    return new FluentFiltersOrRelations(this);
  }

  banner() {
    this.textStr = 'banner';
    return new FluentFiltersOrRelations(this);
  }

  badge() {
    this.textStr = 'badge';
    return new FluentFiltersOrRelations(this);
  }

  alert() {
    this.textStr = 'alert';
    return new FluentFiltersOrRelations(this);
  }

  unknown() {
    this.textStr = 'unknown';
    return new FluentFiltersOrRelations(this);
  }

  withText(text: string) {
    this.textStr = `with text "${text}"`;
    return new FluentFiltersOrRelations(this);
  }

  equalsText(text: string) {
    this.textStr = `equals text "${text}"`;
    return new FluentFiltersOrRelations(this);
  }

  containsText(text: string) {
    this.textStr = `contain text "${text}"`;
    return new FluentFiltersOrRelations(this);
  }

  withColor(color: COLOR) {
    this.textStr = `with color ${color}`;
    return new FluentFiltersOrRelations(this);
  }
}

// Relations

export class FluentFiltersOrRelations extends FluentFilters {
  in(): FluentFilters {
    this.textStr = 'in';
    return new FluentFilters(this);
  }

  rightOf(): FluentFilters {
    this.textStr = 'right of';
    return new FluentFilters(this);
  }

  leftOf(): FluentFilters {
    this.textStr = 'left of';
    return new FluentFilters(this);
  }

  belowOf(): FluentFilters {
    this.textStr = 'below of';
    return new FluentFilters(this);
  }

  aboveOf(): FluentFilters {
    this.textStr = 'above of';
    return new FluentFilters(this);
  }

  nearestOf(): FluentFilters {
    this.textStr = 'nearest';
    return new FluentFilters(this);
  }

  contains(): FluentFilters {
    this.textStr = 'contains';
    return new FluentFilters(this);
  }

  exec(): Promise<TestStepResultDto> {
    return commandStringBuilder(this.prev);
  }
}

// Filters

export class FluentFiltersCondition {
  textStr = '';

  customElements?: CustomElementJson;

  constructor(public prev: FluentCommand | FluentFiltersCondition) { }

  customElement(customElement: CustomElementJson) {
    this.textStr = 'custom element';
    if (customElement.name !== undefined) {
      this.textStr = `custom element with text "${customElement.name}"`;
    }
    this.customElements = customElement;
    return new FluentFiltersOrRelationsCondition(this);
  }

  wizardItemActive() {
    this.textStr = 'wizard item active';
    return new FluentFiltersOrRelationsCondition(this);
  }

  wizardItem() {
    this.textStr = 'wizard item';
    return new FluentFiltersOrRelationsCondition(this);
  }

  wizard() {
    this.textStr = 'wizard';
    return new FluentFiltersOrRelationsCondition(this);
  }

  windowsBar() {
    this.textStr = 'windows bar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  window() {
    this.textStr = 'window';
    return new FluentFiltersOrRelationsCondition(this);
  }

  video() {
    this.textStr = 'video';
    return new FluentFiltersOrRelationsCondition(this);
  }

  url() {
    this.textStr = 'url';
    return new FluentFiltersOrRelationsCondition(this);
  }

  tooltip() {
    this.textStr = 'tooltip';
    return new FluentFiltersOrRelationsCondition(this);
  }

  textfield() {
    this.textStr = 'textfield';
    return new FluentFiltersOrRelationsCondition(this);
  }

  textarea() {
    this.textStr = 'textarea';
    return new FluentFiltersOrRelationsCondition(this);
  }

  text() {
    this.textStr = 'text';
    return new FluentFiltersOrRelationsCondition(this);
  }

  tableRow() {
    this.textStr = 'table row';
    return new FluentFiltersOrRelationsCondition(this);
  }

  tableHeader() {
    this.textStr = 'table header';
    return new FluentFiltersOrRelationsCondition(this);
  }

  tableColumn() {
    this.textStr = 'table column';
    return new FluentFiltersOrRelationsCondition(this);
  }

  table() {
    this.textStr = 'table';
    return new FluentFiltersOrRelationsCondition(this);
  }

  tabSelected() {
    this.textStr = 'tab selected';
    return new FluentFiltersOrRelationsCondition(this);
  }

  tabBar() {
    this.textStr = 'tab bar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  tabActive() {
    this.textStr = 'tab active';
    return new FluentFiltersOrRelationsCondition(this);
  }

  tab() {
    this.textStr = 'tab';
    return new FluentFiltersOrRelationsCondition(this);
  }

  switchEnabled() {
    this.textStr = 'switch enabled';
    return new FluentFiltersOrRelationsCondition(this);
  }

  switchDisabled() {
    this.textStr = 'switch disabled';
    return new FluentFiltersOrRelationsCondition(this);
  }

  statusBar() {
    this.textStr = 'status bar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  sliderIndicator() {
    this.textStr = 'slider indicator';
    return new FluentFiltersOrRelationsCondition(this);
  }

  slider() {
    this.textStr = 'slider';
    return new FluentFiltersOrRelationsCondition(this);
  }

  sidebar() {
    this.textStr = 'sidebar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  scrollBar() {
    this.textStr = 'scroll bar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  rect() {
    this.textStr = 'rect';
    return new FluentFiltersOrRelationsCondition(this);
  }

  recaptcha() {
    this.textStr = 'recaptcha';
    return new FluentFiltersOrRelationsCondition(this);
  }

  rate() {
    this.textStr = 'rate';
    return new FluentFiltersOrRelationsCondition(this);
  }

  radioButtonUnselected() {
    this.textStr = 'radio button unselected';
    return new FluentFiltersOrRelationsCondition(this);
  }

  radioButtonSelected() {
    this.textStr = 'radio button selected';
    return new FluentFiltersOrRelationsCondition(this);
  }

  progressbar() {
    this.textStr = 'progressbar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  progressBar() {
    this.textStr = 'progress bar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  popover() {
    this.textStr = 'popover';
    return new FluentFiltersOrRelationsCondition(this);
  }

  pil() {
    this.textStr = 'pil';
    return new FluentFiltersOrRelationsCondition(this);
  }

  password() {
    this.textStr = 'password';
    return new FluentFiltersOrRelationsCondition(this);
  }

  pager() {
    this.textStr = 'pager';
    return new FluentFiltersOrRelationsCondition(this);
  }

  navigationBar() {
    this.textStr = 'navigation bar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  mouseText() {
    this.textStr = 'mouse text';
    return new FluentFiltersOrRelationsCondition(this);
  }

  mousePointer() {
    this.textStr = 'mouse pointer';
    return new FluentFiltersOrRelationsCondition(this);
  }

  mouseCursor() {
    this.textStr = 'mouse cursor';
    return new FluentFiltersOrRelationsCondition(this);
  }

  modal() {
    this.textStr = 'modal';
    return new FluentFiltersOrRelationsCondition(this);
  }

  messageBox() {
    this.textStr = 'message box';
    return new FluentFiltersOrRelationsCondition(this);
  }

  map() {
    this.textStr = 'map';
    return new FluentFiltersOrRelationsCondition(this);
  }

  logo() {
    this.textStr = 'logo';
    return new FluentFiltersOrRelationsCondition(this);
  }

  link() {
    this.textStr = 'link';
    return new FluentFiltersOrRelationsCondition(this);
  }

  keyboard() {
    this.textStr = 'keyboard';
    return new FluentFiltersOrRelationsCondition(this);
  }

  image() {
    this.textStr = 'image';
    return new FluentFiltersOrRelationsCondition(this);
  }

  icon() {
    this.textStr = 'icon';
    return new FluentFiltersOrRelationsCondition(this);
  }

  header() {
    this.textStr = 'header';
    return new FluentFiltersOrRelationsCondition(this);
  }

  footer() {
    this.textStr = 'footer';
    return new FluentFiltersOrRelationsCondition(this);
  }

  flag() {
    this.textStr = 'flag';
    return new FluentFiltersOrRelationsCondition(this);
  }

  dropdownMenu() {
    this.textStr = 'dropdown menu';
    return new FluentFiltersOrRelationsCondition(this);
  }

  dropdown() {
    this.textStr = 'dropdown';
    return new FluentFiltersOrRelationsCondition(this);
  }

  divider() {
    this.textStr = 'divider';
    return new FluentFiltersOrRelationsCondition(this);
  }

  circle() {
    this.textStr = 'circle';
    return new FluentFiltersOrRelationsCondition(this);
  }

  checkboxUnchecked() {
    this.textStr = 'checkbox unchecked';
    return new FluentFiltersOrRelationsCondition(this);
  }

  checkboxChecked() {
    this.textStr = 'checkbox checked';
    return new FluentFiltersOrRelationsCondition(this);
  }

  chartPie() {
    this.textStr = 'chart pie';
    return new FluentFiltersOrRelationsCondition(this);
  }

  chart() {
    this.textStr = 'chart';
    return new FluentFiltersOrRelationsCondition(this);
  }

  card() {
    this.textStr = 'card';
    return new FluentFiltersOrRelationsCondition(this);
  }

  button() {
    this.textStr = 'button';
    return new FluentFiltersOrRelationsCondition(this);
  }

  browserBar() {
    this.textStr = 'browser bar';
    return new FluentFiltersOrRelationsCondition(this);
  }

  breadcrumb() {
    this.textStr = 'breadcrumb';
    return new FluentFiltersOrRelationsCondition(this);
  }

  banner() {
    this.textStr = 'banner';
    return new FluentFiltersOrRelationsCondition(this);
  }

  badge() {
    this.textStr = 'badge';
    return new FluentFiltersOrRelationsCondition(this);
  }

  alert() {
    this.textStr = 'alert';
    return new FluentFiltersOrRelationsCondition(this);
  }

  unknown() {
    this.textStr = 'unknown';
    return new FluentFiltersOrRelationsCondition(this);
  }

  withText(text: string) {
    this.textStr = `with text "${text}"`;
    return new FluentFiltersOrRelationsCondition(this);
  }

  equalsText(text: string) {
    this.textStr = `equals text "${text}"`;
    return new FluentFiltersOrRelationsCondition(this);
  }

  containsText(text: string) {
    this.textStr = `contain text "${text}"`;
    return new FluentFiltersOrRelationsCondition(this);
  }

  withColor(color: COLOR) {
    this.textStr = `with color ${color}`;
    return new FluentFiltersOrRelationsCondition(this);
  }
}

// Relations

export class FluentFiltersOrRelationsCondition extends FluentFiltersCondition {
  in() {
    this.textStr = 'in';
    return new FluentFiltersCondition(this);
  }

  rightOf() {
    this.textStr = 'right of';
    return new FluentFiltersCondition(this);
  }

  leftOf() {
    this.textStr = 'left of';
    return new FluentFiltersCondition(this);
  }

  belowOf() {
    this.textStr = 'below of';
    return new FluentFiltersCondition(this);
  }

  aboveOf() {
    this.textStr = 'above of';
    return new FluentFiltersCondition(this);
  }

  nearestOf() {
    this.textStr = 'nearest';
    return new FluentFiltersCondition(this);
  }

  contains() {
    this.textStr = 'contains';
    return new FluentFiltersCondition(this);
  }

  exists(): ExecCondition {
    this.textStr = 'exists';
    return new ExecCondition(this);
  }

  notExists(): ExecCondition {
    this.textStr = 'not exists';
    return new ExecCondition(this);
  }
}

class ExecCondition extends Exec { }

// Commands
export abstract class FluentCommand {
  textStr = '';

  click() {
    this.textStr = 'Click on';
    return new FluentFilters(this);
  }

  moveMouseTo() {
    this.textStr = 'Move mouse to';
    return new FluentFilters(this);
  }

  typeIn(text: string) {
    this.textStr = `Type "${text}" in`;
    return new FluentFilters(this);
  }

  type(text: string) {
    this.textStr = `Type "${text}"`;
    return new Exec(this);
  }

  expect() {
    this.textStr = 'Expect';
    return new FluentFiltersCondition(this);
  }

  waitFor(timeValue: number, timeUnit: Timeunit) {
    this.textStr = `Wait for ${timeValue} ${timeUnit}`;
    return new Exec(this);
  }

  scrollElement(x_offset: number, y_offset: number) {
    this.textStr = `Scroll x ${x_offset} y ${y_offset} in`;
    return new FluentFilters(this);
  }

  swipe(x_offset: number, y_offset: number) {
    this.textStr = `Swipe x ${x_offset} y ${y_offset}`;
    return new FluentFilters(this);
  }

  scroll(x_offset: number, y_offset: number) {
    this.textStr = `Scroll x ${x_offset} y ${y_offset}`;
    return new Exec(this);
  }

  mouseLeftClick() {
    this.textStr = 'Mouse left click';
    return new Exec(this);
  }

  mouseRightClick() {
    this.textStr = 'Mouse right click';
    return new Exec(this);
  }

  mouseMiddleClick() {
    this.textStr = 'Mouse middle click';
    return new Exec(this);
  }

  mouseDoubleLeftClick() {
    this.textStr = 'Mouse double left click';
    return new Exec(this);
  }

  mouseDoubleRightClick() {
    this.textStr = 'Mouse double right click';
    return new Exec(this);
  }

  mouseDoubleMiddleClick() {
    this.textStr = 'Mouse double middle click';
    return new Exec(this);
  }

  mouseToggleDown() {
    this.textStr = 'Mouse toggle down';
    return new Exec(this);
  }

  mouseToggleUp() {
    this.textStr = 'Mouse toggle up';
    return new Exec(this);
  }

  pressThreeKeys(first_key: MODIFIER_KEYS, second_key: MODIFIER_KEYS, third_key: PC_KEYS) {
    this.textStr = `Press key ${first_key} ${second_key} ${third_key}`;
    return new Exec(this);
  }

  pressTwoKeys(first_key: MODIFIER_KEYS, second_key: PC_KEYS) {
    this.textStr = `Press key ${first_key} ${second_key}`;
    return new Exec(this);
  }

  pressKey(key: PC_AND_MODIFIER_KEYS) {
    this.textStr = `Press key ${key}`;
    return new Exec(this);
  }

  pressAndroidThirdKey(first_key: ANDROID_KEYS, second_key: ANDROID_KEYS, third_key: ANDROID_KEYS) {
    this.textStr = `Press android key ${first_key} ${second_key} ${third_key}`;
    return new Exec(this);
  }

  pressAndroidTwoKey(first_key: ANDROID_KEYS, second_key: ANDROID_KEYS) {
    this.textStr = `Press android key ${first_key} ${second_key}`;
    return new Exec(this);
  }

  pressAndroidKey(key: ANDROID_KEYS) {
    this.textStr = `Press android key ${key}`;
    return new Exec(this);
  }

  abstract exec(instruction: string,
    customElements?: CustomElementJson[]
  ): Promise<TestStepResultDto>;
}
