/* eslint-disable @typescript-eslint/no-use-before-define */
/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable max-classes-per-file */
/* eslint-disable max-len */
// Autogenerated from typescript.template file

// TODO: Split this in multiple files
import { CustomElementJson } from '../core/model/test-case-dto';
import { DetectedElement } from '../core/model/annotation-result/detected-element';

export enum Separators {
  STRING = '<|string|>',
}

// LITERALS
export type PC_KEY = 'backspace' | 'delete' | 'enter' | 'tab' | 'escape' | 'up' | 'down' | 'right' | 'left' | 'home' | 'end' | 'pageup' | 'pagedown' | 'f1' | 'f2' | 'f3' | 'f4' | 'f5' | 'f6' | 'f7' | 'f8' | 'f9' | 'f10' | 'f11' | 'f12' | 'space' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '!' | '"' | '#' | '$' | '%' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '[' | '\\' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~ ';
export type ANDROID_KEY = 'home' | 'back' | 'call' | 'endcall' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'star' | 'pound' | 'dpad_up' | 'dpad_down' | 'dpad_left' | 'dpad_right' | 'dpad_center' | 'volume_up' | 'volume_down' | 'power' | 'camera' | 'clear' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'comma' | 'period' | 'alt_left' | 'alt_right' | 'shift_left' | 'shift_right' | 'tab' | 'space' | 'sym' | 'explorer' | 'envelope' | 'enter' | 'del' | 'grave' | 'minus' | 'equals' | 'left_bracket' | 'right_bracket' | 'backslash' | 'semicolon' | 'apostrophe' | 'slash' | 'at' | 'num' | 'headsethook' | 'focus' | 'plus' | 'menu' | 'notification' | 'search' | 'media_play_pause' | 'media_stop' | 'media_next' | 'media_previous' | 'media_rewind' | 'media_fast_forward' | 'mute' | 'page_up' | 'page_down' | 'switch_charset' | 'escape' | 'forward_del' | 'ctrl_left' | 'ctrl_right' | 'caps_lock' | 'scroll_lock' | 'function' | 'break' | 'move_home' | 'move_end' | 'insert' | 'forward' | 'media_play' | 'media_pause' | 'media_close' | 'media_eject' | 'media_record' | 'f1' | 'f2' | 'f3' | 'f4' | 'f5' | 'f6' | 'f7' | 'f8' | 'f9' | 'f10' | 'f11' | 'f12' | 'num_lock' | 'numpad_0' | 'numpad_1' | 'numpad_2' | 'numpad_3' | 'numpad_4' | 'numpad_5' | 'numpad_6' | 'numpad_7' | 'numpad_8' | 'numpad_9' | 'numpad_divide' | 'numpad_multiply' | 'numpad_subtract' | 'numpad_add' | 'numpad_dot' | 'numpad_comma' | 'numpad_enter' | 'numpad_equals' | 'numpad_left_paren' | 'numpad_right_paren' | 'volume_mute' | 'info' | 'channel_up' | 'channel_down' | 'zoom_in' | 'zoom_out' | 'window' | 'guide' | 'bookmark' | 'captions' | 'settings' | 'app_switch' | 'language_switch' | 'contacts' | 'calendar' | 'music' | 'calculator' | 'assist' | 'brightness_down' | 'brightness_up' | 'media_audio_track' | 'sleep' | 'wakeup' | 'pairing' | 'media_top_menu' | 'last_channel' | 'tv_data_service' | 'voice_assist' | 'help' | 'navigate_previous' | 'navigate_next' | 'navigate_in' | 'navigate_out' | 'dpad_up_left' | 'dpad_down_left' | 'dpad_up_right' | 'dpad_down_right' | 'media_skip_forward' | 'media_skip_backward' | 'media_step_forward' | 'media_step_backward' | 'soft_sleep' | 'cut' | 'copy' | 'paste' | 'all_apps' | 'refresh';
export type MODIFIER_KEY = 'command' | 'alt' | 'control' | 'shift' | 'right_shift';
export type COLOR = 'black' | 'white' | 'red' | 'green' | 'yellow green' | 'orange' | 'yellow' | 'purple' | 'pink' | 'gray' | 'lime green' | 'royal blue';
export type PC_AND_MODIFIER_KEY = 'command' | 'alt' | 'control' | 'shift' | 'right_shift' | 'backspace' | 'delete' | 'enter' | 'tab' | 'escape' | 'up' | 'down' | 'right' | 'left' | 'home' | 'end' | 'pageup' | 'pagedown' | 'f1' | 'f2' | 'f3' | 'f4' | 'f5' | 'f6' | 'f7' | 'f8' | 'f9' | 'f10' | 'f11' | 'f12' | 'space' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '!' | '"' | '#' | '$' | '%' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | '[' | '\\' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~ ';

abstract class FluentBase {
  constructor(protected prev?: FluentBase) { }

  protected _textStr = '';

  protected _params = new Map<string, unknown>();

  protected static addParams(
    paramsList: Map<string, unknown[]>,
    params: Map<string, unknown>,
  ): Map<string, unknown[]> {
    params.forEach((value: unknown, key: string) => {
      if (!paramsList.has(key)) {
        paramsList.set(key, []);
      }
      paramsList.set(key, [value, ...paramsList.get(key) as unknown[]]);
    });
    return paramsList;
  }

  protected fluentCommandStringBuilder(
    currentInstruction = '',
    paramsList: Map<string, unknown[]> = new Map<string, unknown[]>(),
  ): Promise<void> {
    const newCurrentInstruction = `${this.textStr} ${currentInstruction}`;
    const newParamsList = FluentBase.addParams(paramsList, this._params);
    if (this instanceof FluentCommand) {
      const fluentCommand = this as FluentCommand;
      const customElements = newParamsList.has('customElement') ? newParamsList.get('customElement') as CustomElementJson[] : [];
      return fluentCommand.fluentCommandExecutor(
        newCurrentInstruction.trim(),
        customElements,
      );
    }
    if (!this.prev) {
      throw new Error('Prev element not defined');
    }
    return this.prev.fluentCommandStringBuilder(
      newCurrentInstruction,
      newParamsList,
    );
  }

  protected getterStringBuilder(
    currentInstruction = '',
    paramsList: Map<string, unknown[]> = new Map<string, unknown[]>(),
  ): Promise<DetectedElement[]> {
    const newCurrentInstruction = `${this.textStr} ${currentInstruction}`;
    const newParamsList = FluentBase.addParams(paramsList, this._params);
    if (this instanceof Getter) {
      const getter = this as Getter;
      const customElements = newParamsList.has('customElement') ? newParamsList.get('customElement') as CustomElementJson[] : [];
      return getter.getterExecutor(
        newCurrentInstruction.trim(),
        customElements,
      );
    }
    if (!this.prev) {
      throw new Error('Prev element not defined');
    }
    return this.prev.getterStringBuilder(
      newCurrentInstruction,
      newParamsList,
    );
  }

  protected get textStr() { return this._textStr; }

  protected get params() { return this._params; }
}

export interface Executable {
  exec(): Promise<void>
}

export class Exec extends FluentBase implements Executable {
  exec(): Promise<void> {
    return this.fluentCommandStringBuilder();
  }
}

// Filters

export class FluentFilters extends FluentBase {
  /**
   * Filters for a UI element 'textfield'.
   *
   * @return {FluentFiltersOrRelations}
   */
  textfield(): FluentFiltersOrRelations {
    this._textStr = 'textfield';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for a UI element 'table'.
   *
   * @return {FluentFiltersOrRelations}
   */
  table(): FluentFiltersOrRelations {
    this._textStr = 'table';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for a UI element 'switch'.
   *
   * @return {FluentFiltersOrRelations}
   */
  switch(): FluentFiltersOrRelations {
    this._textStr = 'switch';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for a UI element 'logo'.
   *
   * @return {FluentFiltersOrRelations}
   */
  logo(): FluentFiltersOrRelations {
    this._textStr = 'logo';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for a UI element 'image'.
   *
   * @return {FluentFiltersOrRelations}
   */
  image(): FluentFiltersOrRelations {
    this._textStr = 'image';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for a UI element 'container'.
   *
   * @return {FluentFiltersOrRelations}
   */
  container(): FluentFiltersOrRelations {
    this._textStr = 'container';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for a UI element 'unknown'.
   *
   * @return {FluentFiltersOrRelations}
   */
  unknown(): FluentFiltersOrRelations {
    this._textStr = 'unknown';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for an UI element 'button'.
   *
   * **Examples:**
   * ```typescript
   * await aui.moveMouseTo().button().exec()
   * ```
   *
   * @return {FluentFiltersOrRelations}
   */
  button(): FluentFiltersOrRelations {
    this._textStr = 'button';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for an UI element 'text'.
   *
   * @return {FluentFiltersOrRelations}
   */
  text(): FluentFiltersOrRelations {
    this._textStr = 'text';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for an UI element 'icon'.
   *
   * You can combine it with the 'withText' command to look for a specific icon.
   *
   * **Examples:**
   * ```typescript
   * icon().withText('plus')
   * ```
   *
   * Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative.
   *
   * @return {FluentFiltersOrRelations}
   */
  icon(): FluentFiltersOrRelations {
    this._textStr = 'icon';

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for a custom UI element (see {@link CustomElementJson}).
   *
   * **Important**: This increases the runtime quite a bit. So
   *  only use it when absolutely necessary.
   *
   * @param {CustomElementJson} customElement - The custom element to filter for.
   *
   * @return {FluentFiltersOrRelations}
   */
  customElement(customElement: CustomElementJson): FluentFiltersOrRelations {
    this._textStr = 'custom element';
    this._params.set('customElement', customElement);

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for similar (doesn't need to be a 100% equal) text.
   *
   * **Examples:**
   * ```typescript
   * 'text' === withText('text') => true
   * 'test' === withText('text') => true
   * 'Test' === withText('text') => true
   * 'Text' === withText('text') => true
   * 'TEXT' === withText('text') => true
   * 'texst' === withText('text') => true
   * 'texts' === withText('text') => true
   *
   * // usually false
   * 'atebxtc' === withText('text') => false
   * 'other' === withText('text') => false
   * ```
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelations}
   */
  withText(text: string): FluentFiltersOrRelations {
    this._textStr = `with text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for texts, which match the regex pattern.
   *
   * **Examples:**
   *
   * ```typescript
   * 'The rain in Spain' === withTextRegex('\b[Ss]\w+') => true
   * 'The rain in Portugal' === withTextRegex('\b[Ss]\w+') => false
   * 'The rain in switzerland' === withTextRegex('\b[Ss]\w+') => true
   *
   * await aui.get().text().withTextRegex('\b[Ss]\w+').exec()
   * ```
   *
   * @param {string} regex_pattern - A regex pattern
   *
   * @return {FluentFiltersOrRelations}
   */
  withTextRegex(regex_pattern: string): FluentFiltersOrRelations {
    this._textStr = `match regex pattern ${Separators.STRING}${regex_pattern}${Separators.STRING}`;

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for equal text.
   *
   * **Note:** This should be only used in cases where the similarity
   *  comparison of {@link FluentFilters.withText()} allows not for
   *  specific enough filtering (too many elements).
   *
   * **Examples:**
   * ```typescript
   * 'text' === withExactText('text') => true
   * 'test' === withExactText('text') => false
   * 'other' === withExactText('text') => false
   *
   * await aui.moveMouseTo().text().withExactText('Password').exec()
   * ```
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelations}
   */
  withExactText(text: string): FluentFiltersOrRelations {
    this._textStr = `equals text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for text containing the text provided as an argument.
   *
   * **Examples:**
   * ```typescript
   * 'This is an text' === containsText('text') => true
   * 'This is an text' === containsText('other text') => false
   * 'This is an text' === containsText('other') => false
   * ```
   * ![](https://docs.askui.com/img/gif/containsText.gif)
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelations}
   */
  containsText(text: string): FluentFiltersOrRelations {
    this._textStr = `contain text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelations(this);
  }

  /**
   * Filters for elements having a specific color.
   *
   * @param {COLOR} color - A color to match
   *
   * @return {FluentFiltersOrRelations}
   */
  colored(color: COLOR): FluentFiltersOrRelations {
    this._textStr = `with color ${color}`;

    return new FluentFiltersOrRelations(this);
  }
}

// Relations

export class FluentFiltersOrRelations extends FluentFilters {
  /**
   * Logic or operator
   *
   * **Examples:**
   * ```text
   * scene 1
   * --------------  ---------------
   * |  button    |  |  icon       |
   * --------------  ---------------
   *
   * scene 2
   * --------------  ---------------
   * |  button    |  |  text       |
   * --------------  ---------------
   *
   * ```
   * In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text.
   * You can use **the `or()` relation**, so your teststep is valid for both scenes
   * ```typescript
   * const button = await aui.get().button().rightOf().icon().or().text().exec();
   * console.log(button);
   * ```
   * Returns the same button for both cases
   * ```text
   *  console output: [
   *   DetectedElement {
   *      name: 'BUTTON',
   *      text: 'button',
   *      colors: [ 'red', 'black', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   *
   * @return {FluentFilters}
   */
  or(): FluentFilters {
    this._textStr = 'or';

    return new FluentFilters(this);
  }

  /**
   * Logic and operator
   *
   * **Examples:**
   * ```text
   * example scene:
   *  --------------------------   --------------------------
   *  |  icon user colored black | |  icon  user colored red |
   *  --------------------------   --------------------------
   * ```
   * ```typescript
   * const icons = await aui.get().icon().withText('user').exec();
   * console.log(icons);
   * ```
   * Using only the filter withText, the get command will return both icons because they share the same text
   * ```text
   * console output: [
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'black', 'black', 'black' ],
   *      bndbox: BoundingBox {
   *         xmin: 1000,
   *         ymin: 1010,
   *         xmax: 1020,
   *         ymax: 1030
   *      }
   *   },
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'red', 'red', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   * You can combine filters with **the `and()` relation** and specify exactly which icon you want
   * ```typescript
   * const icons = await aui.get().icon().withText('user').and().colored('red').exec()
   * console.log(icons)
   * ```
   * The get command returns only the red icon although both icons have the same text
   * ```text
   *  console output: [
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'red', 'red', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   *
   * @return {FluentFilters}
   */
  and(): FluentFilters {
    this._textStr = 'and';

    return new FluentFilters(this);
  }

  /**
   * Filters for an element inside another element.
   *
   * **Examples:**
   * ```typescript
   * --------------------
   * |     outerEl      |
   * |  --------------  |
   * |  |  innerEl   |  |
   * |  --------------  |
   * |                  |
   * --------------------
   *
   * // Returns innerEl because innerEl is inside outerEl
   * ...innerEl().in().outerEl()
   * // Returns nothing because innerEl is not inside outerEl
   * ...outerEl().in().innerEl()
   * ```
   * ![](https://docs.askui.com/img/gif/in.gif)
   *
   * @return {FluentFilters}
   */
  in(): FluentFilters {
    this._textStr = 'in';

    return new FluentFilters(this);
  }

  /**
   * Filters for an element right of another element.
   *
   * **Examples:**
   * ```typescript
   * --------------  --------------
   * |  leftEl    |  |  rightEl   |
   * --------------  --------------
   *
   * // Returns rightEl because rightEl is right of leftEl
   * ...rightEl().rightOf().leftEl()
   * // Returns no element because leftEl is left of rightEl
   * ...leftEl().rightOf().rightEl()
   * ```
   * ![](https://docs.askui.com/img/gif/rightOf.gif)
   *
   * @return {FluentFilters}
   */
  rightOf(): FluentFilters {
    this._textStr = 'right of';

    return new FluentFilters(this);
  }

  /**
   * Filters for an element left of another element.
   *
   * **Examples:**
   * ```typescript
   * --------------  --------------
   * |  leftEl    |  |  rightEl   |
   * --------------  --------------
   *
   * // Returns leftEl because leftEl is left of rightEl
   * ...leftEl().leftOf().rightEl()
   * // Returns no element because rightEl is left of leftEl
   * ...rightEl().leftOf().leftEl()
   * ```
   * ![](https://docs.askui.com/img/gif/leftOf.gif)
   *
   * @return {FluentFilters}
   */
  leftOf(): FluentFilters {
    this._textStr = 'left of';

    return new FluentFilters(this);
  }

  /**
   * Filters for an element below another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |    text    |
   * --------------
   * --------------
   * |   button   |
   * --------------
   *
   * // Returns button because button is below text
   * ...button().below().text()
   * // Returns no element because text is above button
   * ...text().below().button()
   * ```
   * ![](https://docs.askui.com/img/gif/below.gif)
   *
   * @return {FluentFilters}
   */
  below(): FluentFilters {
    this._textStr = 'below';

    return new FluentFilters(this);
  }

  /**
   * Filters for an element above another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |    text    |
   * --------------
   * --------------
   * |   button   |
   * --------------
   *
   * // Returns text because text is above button
   * ...text().above().button()
   * // Returns no element because button is below text
   * ...button().above().text()
   * ```
   * ![](https://docs.askui.com/img/gif/above.gif)
   *
   * @return {FluentFilters}
   */
  above(): FluentFilters {
    this._textStr = 'above';

    return new FluentFilters(this);
  }

  /**
   * Filters for an element nearest to another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |  button 1  |
   * --------------
   * --------------
   * |   text     |
   * --------------
   *
   *
   *
   * --------------
   * |  button 2  |
   * --------------
   *
   * // Returns button 1 because button 1 is nearer to the text than button 2
   * ...button().nearestTo().text()
   * ```
   * ![](https://docs.askui.com/img/gif/nearestTo.gif)
   *
   * @return {FluentFilters}
   */
  nearestTo(): FluentFilters {
    this._textStr = 'nearest to';

    return new FluentFilters(this);
  }

  /**
   * Filters for an element containing another element.
   *
   * **Example:**
   * ```typescript
   * --------------------
   * |     outerEl      |
   * |  --------------  |
   * |  |  innerEl   |  |
   * |  --------------  |
   * |                  |
   * --------------------
   *
   * // Returns outerEl because outerEl contains innerEl
   * ...outerEl().contains().innerEl()
   * //  Returns no element because innerEl contains no outerEl
   * ...innerEl().contains().outerEl()
   * ```
   * ![](https://docs.askui.com/img/gif/contains.gif)
   *
   * @return {FluentFilters}
   */
  contains(): FluentFilters {
    this._textStr = 'contains';

    return new FluentFilters(this);
  }

  exec(): Promise<void> {
    return this.fluentCommandStringBuilder();
  }
}

// Filters

export class FluentFiltersCondition extends FluentBase {
  /**
   * Filters for a UI element 'textfield'.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  textfield(): FluentFiltersOrRelationsCondition {
    this._textStr = 'textfield';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for a UI element 'table'.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  table(): FluentFiltersOrRelationsCondition {
    this._textStr = 'table';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for a UI element 'switch'.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  switch(): FluentFiltersOrRelationsCondition {
    this._textStr = 'switch';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for a UI element 'logo'.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  logo(): FluentFiltersOrRelationsCondition {
    this._textStr = 'logo';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for a UI element 'image'.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  image(): FluentFiltersOrRelationsCondition {
    this._textStr = 'image';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for a UI element 'container'.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  container(): FluentFiltersOrRelationsCondition {
    this._textStr = 'container';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for a UI element 'unknown'.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  unknown(): FluentFiltersOrRelationsCondition {
    this._textStr = 'unknown';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for an UI element 'button'.
   *
   * **Examples:**
   * ```typescript
   * await aui.moveMouseTo().button().exec()
   * ```
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  button(): FluentFiltersOrRelationsCondition {
    this._textStr = 'button';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for an UI element 'text'.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  text(): FluentFiltersOrRelationsCondition {
    this._textStr = 'text';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for an UI element 'icon'.
   *
   * You can combine it with the 'withText' command to look for a specific icon.
   *
   * **Examples:**
   * ```typescript
   * icon().withText('plus')
   * ```
   *
   * Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  icon(): FluentFiltersOrRelationsCondition {
    this._textStr = 'icon';

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for a custom UI element (see {@link CustomElementJson}).
   *
   * **Important**: This increases the runtime quite a bit. So
   *  only use it when absolutely necessary.
   *
   * @param {CustomElementJson} customElement - The custom element to filter for.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  customElement(customElement: CustomElementJson): FluentFiltersOrRelationsCondition {
    this._textStr = 'custom element';
    this._params.set('customElement', customElement);

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for similar (doesn't need to be a 100% equal) text.
   *
   * **Examples:**
   * ```typescript
   * 'text' === withText('text') => true
   * 'test' === withText('text') => true
   * 'Test' === withText('text') => true
   * 'Text' === withText('text') => true
   * 'TEXT' === withText('text') => true
   * 'texst' === withText('text') => true
   * 'texts' === withText('text') => true
   *
   * // usually false
   * 'atebxtc' === withText('text') => false
   * 'other' === withText('text') => false
   * ```
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  withText(text: string): FluentFiltersOrRelationsCondition {
    this._textStr = `with text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for texts, which match the regex pattern.
   *
   * **Examples:**
   *
   * ```typescript
   * 'The rain in Spain' === withTextRegex('\b[Ss]\w+') => true
   * 'The rain in Portugal' === withTextRegex('\b[Ss]\w+') => false
   * 'The rain in switzerland' === withTextRegex('\b[Ss]\w+') => true
   *
   * await aui.get().text().withTextRegex('\b[Ss]\w+').exec()
   * ```
   *
   * @param {string} regex_pattern - A regex pattern
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  withTextRegex(regex_pattern: string): FluentFiltersOrRelationsCondition {
    this._textStr = `match regex pattern ${Separators.STRING}${regex_pattern}${Separators.STRING}`;

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for equal text.
   *
   * **Note:** This should be only used in cases where the similarity
   *  comparison of {@link FluentFilters.withText()} allows not for
   *  specific enough filtering (too many elements).
   *
   * **Examples:**
   * ```typescript
   * 'text' === withExactText('text') => true
   * 'test' === withExactText('text') => false
   * 'other' === withExactText('text') => false
   *
   * await aui.moveMouseTo().text().withExactText('Password').exec()
   * ```
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  withExactText(text: string): FluentFiltersOrRelationsCondition {
    this._textStr = `equals text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for text containing the text provided as an argument.
   *
   * **Examples:**
   * ```typescript
   * 'This is an text' === containsText('text') => true
   * 'This is an text' === containsText('other text') => false
   * 'This is an text' === containsText('other') => false
   * ```
   * ![](https://docs.askui.com/img/gif/containsText.gif)
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  containsText(text: string): FluentFiltersOrRelationsCondition {
    this._textStr = `contain text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelationsCondition(this);
  }

  /**
   * Filters for elements having a specific color.
   *
   * @param {COLOR} color - A color to match
   *
   * @return {FluentFiltersOrRelationsCondition}
   */
  colored(color: COLOR): FluentFiltersOrRelationsCondition {
    this._textStr = `with color ${color}`;

    return new FluentFiltersOrRelationsCondition(this);
  }
}

// Relations

export class FluentFiltersOrRelationsCondition extends FluentFiltersCondition {
  /**
   * Logic or operator
   *
   * **Examples:**
   * ```text
   * scene 1
   * --------------  ---------------
   * |  button    |  |  icon       |
   * --------------  ---------------
   *
   * scene 2
   * --------------  ---------------
   * |  button    |  |  text       |
   * --------------  ---------------
   *
   * ```
   * In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text.
   * You can use **the `or()` relation**, so your teststep is valid for both scenes
   * ```typescript
   * const button = await aui.get().button().rightOf().icon().or().text().exec();
   * console.log(button);
   * ```
   * Returns the same button for both cases
   * ```text
   *  console output: [
   *   DetectedElement {
   *      name: 'BUTTON',
   *      text: 'button',
   *      colors: [ 'red', 'black', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   *
   * @return {FluentFiltersCondition}
   */
  or(): FluentFiltersCondition {
    this._textStr = 'or';

    return new FluentFiltersCondition(this);
  }

  /**
   * Logic and operator
   *
   * **Examples:**
   * ```text
   * example scene:
   *  --------------------------   --------------------------
   *  |  icon user colored black | |  icon  user colored red |
   *  --------------------------   --------------------------
   * ```
   * ```typescript
   * const icons = await aui.get().icon().withText('user').exec();
   * console.log(icons);
   * ```
   * Using only the filter withText, the get command will return both icons because they share the same text
   * ```text
   * console output: [
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'black', 'black', 'black' ],
   *      bndbox: BoundingBox {
   *         xmin: 1000,
   *         ymin: 1010,
   *         xmax: 1020,
   *         ymax: 1030
   *      }
   *   },
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'red', 'red', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   * You can combine filters with **the `and()` relation** and specify exactly which icon you want
   * ```typescript
   * const icons = await aui.get().icon().withText('user').and().colored('red').exec()
   * console.log(icons)
   * ```
   * The get command returns only the red icon although both icons have the same text
   * ```text
   *  console output: [
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'red', 'red', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   *
   * @return {FluentFiltersCondition}
   */
  and(): FluentFiltersCondition {
    this._textStr = 'and';

    return new FluentFiltersCondition(this);
  }

  /**
   * Filters for an element inside another element.
   *
   * **Examples:**
   * ```typescript
   * --------------------
   * |     outerEl      |
   * |  --------------  |
   * |  |  innerEl   |  |
   * |  --------------  |
   * |                  |
   * --------------------
   *
   * // Returns innerEl because innerEl is inside outerEl
   * ...innerEl().in().outerEl()
   * // Returns nothing because innerEl is not inside outerEl
   * ...outerEl().in().innerEl()
   * ```
   * ![](https://docs.askui.com/img/gif/in.gif)
   *
   * @return {FluentFiltersCondition}
   */
  in(): FluentFiltersCondition {
    this._textStr = 'in';

    return new FluentFiltersCondition(this);
  }

  /**
   * Filters for an element right of another element.
   *
   * **Examples:**
   * ```typescript
   * --------------  --------------
   * |  leftEl    |  |  rightEl   |
   * --------------  --------------
   *
   * // Returns rightEl because rightEl is right of leftEl
   * ...rightEl().rightOf().leftEl()
   * // Returns no element because leftEl is left of rightEl
   * ...leftEl().rightOf().rightEl()
   * ```
   * ![](https://docs.askui.com/img/gif/rightOf.gif)
   *
   * @return {FluentFiltersCondition}
   */
  rightOf(): FluentFiltersCondition {
    this._textStr = 'right of';

    return new FluentFiltersCondition(this);
  }

  /**
   * Filters for an element left of another element.
   *
   * **Examples:**
   * ```typescript
   * --------------  --------------
   * |  leftEl    |  |  rightEl   |
   * --------------  --------------
   *
   * // Returns leftEl because leftEl is left of rightEl
   * ...leftEl().leftOf().rightEl()
   * // Returns no element because rightEl is left of leftEl
   * ...rightEl().leftOf().leftEl()
   * ```
   * ![](https://docs.askui.com/img/gif/leftOf.gif)
   *
   * @return {FluentFiltersCondition}
   */
  leftOf(): FluentFiltersCondition {
    this._textStr = 'left of';

    return new FluentFiltersCondition(this);
  }

  /**
   * Filters for an element below another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |    text    |
   * --------------
   * --------------
   * |   button   |
   * --------------
   *
   * // Returns button because button is below text
   * ...button().below().text()
   * // Returns no element because text is above button
   * ...text().below().button()
   * ```
   * ![](https://docs.askui.com/img/gif/below.gif)
   *
   * @return {FluentFiltersCondition}
   */
  below(): FluentFiltersCondition {
    this._textStr = 'below';

    return new FluentFiltersCondition(this);
  }

  /**
   * Filters for an element above another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |    text    |
   * --------------
   * --------------
   * |   button   |
   * --------------
   *
   * // Returns text because text is above button
   * ...text().above().button()
   * // Returns no element because button is below text
   * ...button().above().text()
   * ```
   * ![](https://docs.askui.com/img/gif/above.gif)
   *
   * @return {FluentFiltersCondition}
   */
  above(): FluentFiltersCondition {
    this._textStr = 'above';

    return new FluentFiltersCondition(this);
  }

  /**
   * Filters for an element nearest to another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |  button 1  |
   * --------------
   * --------------
   * |   text     |
   * --------------
   *
   *
   *
   * --------------
   * |  button 2  |
   * --------------
   *
   * // Returns button 1 because button 1 is nearer to the text than button 2
   * ...button().nearestTo().text()
   * ```
   * ![](https://docs.askui.com/img/gif/nearestTo.gif)
   *
   * @return {FluentFiltersCondition}
   */
  nearestTo(): FluentFiltersCondition {
    this._textStr = 'nearest to';

    return new FluentFiltersCondition(this);
  }

  /**
   * Filters for an element containing another element.
   *
   * **Example:**
   * ```typescript
   * --------------------
   * |     outerEl      |
   * |  --------------  |
   * |  |  innerEl   |  |
   * |  --------------  |
   * |                  |
   * --------------------
   *
   * // Returns outerEl because outerEl contains innerEl
   * ...outerEl().contains().innerEl()
   * //  Returns no element because innerEl contains no outerEl
   * ...innerEl().contains().outerEl()
   * ```
   * ![](https://docs.askui.com/img/gif/contains.gif)
   *
   * @return {FluentFiltersCondition}
   */
  contains(): FluentFiltersCondition {
    this._textStr = 'contains';

    return new FluentFiltersCondition(this);
  }

  /**
   * Expects that filtered element exists.
   *
   * **Examples:**
   * ```typescript
   * await aui.expect().text().withText('Login').exists().exec()
   * ```
   *
   * @return {ExecCondition}
   */
  exists(): ExecCondition {
    this._textStr = 'exists';

    return new ExecCondition(this);
  }

  /**
   * Expects that filtered element does not exist.
   *
   * **Examples:**
   * ```typescript
   * await aui.expect().text().withText('Login').notExists().exec()
   * ```
   *
   * @return {ExecCondition}
   */
  notExists(): ExecCondition {
    this._textStr = 'not exists';

    return new ExecCondition(this);
  }
}

class ExecCondition extends Exec { }

// Commands
export abstract class FluentCommand extends FluentBase {
  constructor() {
    super(undefined);
  }

  /**
   * Expects a condition, e.g., `exists()` or `notExits()`.
   *
   * **Examples:**
   * ```typescript
   * await aui.expect().text().withText('Login').exists().exec()
   * await aui.expect().text().withText('Login').notExists().exec()
   * ```
   *
   * @return {FluentFiltersCondition}
   */
  expect(): FluentFiltersCondition {
    this._textStr = 'Expect';

    return new FluentFiltersCondition(this);
  }

  /**
   * Clicks on the filtered element.
   *
   * **Example:**
   * ```typescript
   * await aui.click().button().withText('Submit').exec()
   * ```
   *
   * @return {FluentFilters}
   */
  click(): FluentFilters {
    this._textStr = 'Click on';

    return new FluentFilters(this);
  }

  /**
   * Move mouse over the filtered element.
   *
   * **Example:**
   * ```typescript
   * await aui.moveMouseTo().button().withText('Submit').exec()
   * ```
   *
   * @return {FluentFilters}
   */
  moveMouseTo(): FluentFilters {
    this._textStr = 'Move mouse to';

    return new FluentFilters(this);
  }

  /**
   * Puts the focus on the filtered element and types in the text.
   *
   * **Examples:**
   * ```typescript
   * await aui.typeIn('Type some text').textfield().exec()
   *
   * // mask the text so it is not send to the askui-inference server
   * await aui.typeIn('Type some text', { isSecret: true, secretMask: '**' }).textfield().exec()
   * ```
   * ![](https://docs.askui.com/img/gif/typeIn.gif)
   *
   * @param {string} text - A text to type
   *
   * @return {FluentFilters}
   */
  typeIn(text: string): FluentFilters {
    this._textStr = `Type ${Separators.STRING}${text}${Separators.STRING} in`;

    return new FluentFilters(this);
  }

  /**
   * Moves mouse to the filtered element and scrolls in the x and y direction.
   *
   * **macOS**: May not work as expected!
   *
   * **Example:**
   * ```typescript
   * await aui.scroll(0, 10).textarea().exec()
   * ```
   *
   * @param {number} x_offset - A (positive/negative) x direction.
   * @param {number} y_offset - A (positive/negative) y direction.
   *
   * @return {FluentFilters}
   */
  scrollInside(x_offset: number, y_offset: number): FluentFilters {
    this._textStr = `Scroll x ${x_offset} y ${y_offset} in`;

    return new FluentFilters(this);
  }

  /**
   * Moves the mouse relatively to an element in the direction.
   * This can be used when the mouse should not hover over an element anymore.
   *
   * **Examples:**
   * ```typescript
   * // Move mouse 30 pixels below button
   * await aui.moveMouseRelativelyTo(0, 30).button().withText('Submit').exec()
   * ```
   * ![](https://docs.askui.com/img/gif/moveMouseRelativelyTo.gif)
   *
   * @param {number} x_offset - A (positive/negative) x direction.
   * @param {number} y_offset - A (positive/negative) y direction.
   *
   * @return {FluentFilters}
   */
  moveMouseRelativelyTo(x_offset: number, y_offset: number): FluentFilters {
    this._textStr = `Move mouse x ${x_offset} y ${y_offset} relatively to`;

    return new FluentFilters(this);
  }

  /**
   * Swipe an element in the x and y direction.
   * Holds the left mouse button down on Windows, Linux and macOS and drags the element.
   * On touch devices it taps the element and then drags it.
   *
   * **Example:**
   * ```typescript
   * // Swipe the element 500 to the right
   * await aui.swipe(500, 0).image().exec()
   * ```
   * ![](https://docs.askui.com/img/gif/swipe.gif)
   *
   * @param {number} x_offset - A x direction. positive and negative values are accepted
   * @param {number} y_offset - A y direction. positive and negative values are accepted
   *
   * @return {FluentFilters}
   */
  swipe(x_offset: number, y_offset: number): FluentFilters {
    this._textStr = `Swipe x ${x_offset} y ${y_offset}`;

    return new FluentFilters(this);
  }

  /**
   * Types a text at the current position.
   * If you need to focus the element first, use typeIn()
   *
   * **Examples:**
   * ```typescript
   * await aui.type('Type some text').exec()
   *
   * // mask the text so it is not send to the askui-inference serverawait aui.type('Type some text', { isSecret: true, secretMask: '**' }).exec()
   * ```
   *
   * @param {string} text - A text to type
   *
   * @return {Exec}
   */
  type(text: string): Exec {
    this._textStr = `Type ${Separators.STRING}${text}${Separators.STRING}`;

    return new Exec(this);
  }

  /**
   * Moves the mouse from the current position (relative) in x and y direction.
   *
   * @param {number} x_offset - A (positive/negative) x direction.
   * @param {number} y_offset - A (positive/negative) y direction.
   *
   * @return {Exec}
   */
  moveMouseRelatively(x_offset: number, y_offset: number): Exec {
    this._textStr = `Move mouse from current position with x ${x_offset} y ${y_offset}`;

    return new Exec(this);
  }

  /**
   * Moves the mouse to the absolute x and y coordinates.
   *
   * @param {number} x_coordinate - A (positive/negative) x coordinate.
   * @param {number} y_coordinate - A (positive/negative) y coordinate.
   *
   * @return {Exec}
   */
  moveMouse(x_coordinate: number, y_coordinate: number): Exec {
    this._textStr = `Move mouse to x ${x_coordinate} y ${y_coordinate}`;

    return new Exec(this);
  }

  /**
   * Scrolls based on the current mouse position in the x and y direction.
   *
   * **Important**: Mouse must be positioned in a scrollable area.
   *
   * **macOS**: May not work as expected!
   *
   * **Example:**
   * ```typescript
   * // Scroll 10 up in y direction
   * await aui.scroll(0, 10).exec()
   * ```
   *
   * @param {number} x_offset - A (positive/negative) x direction.
   * @param {number} y_offset - A (positive/negative) y direction.
   *
   * @return {Exec}
   */
  scroll(x_offset: number, y_offset: number): Exec {
    this._textStr = `Scroll x ${x_offset} y ${y_offset}`;

    return new Exec(this);
  }

  /**
   * Executes a shell command on the device.
   *
   * **Example:**
   * ```typescript
   * // Open the lastpass app
   * await aui.execOnShell('monkey -p com.lastpass.authenticator 1').exec()
   * ```
   *
   * @param {string} shell_command - A shell command which is executed.
   *
   * @return {Exec}
   */
  execOnShell(shell_command: string): Exec {
    this._textStr = `Execute shell command ${Separators.STRING}${shell_command}${Separators.STRING}`;

    return new Exec(this);
  }

  /**
   * Clicks with left mouse key.
   *
   * @return {Exec}
   */
  mouseLeftClick(): Exec {
    this._textStr = 'Mouse left click';

    return new Exec(this);
  }

  /**
   * Clicks with right mouse key.
   *
   * @return {Exec}
   */
  mouseRightClick(): Exec {
    this._textStr = 'Mouse right click';

    return new Exec(this);
  }

  /**
   * Clicks with middle mouse key.
   *
   * @return {Exec}
   */
  mouseMiddleClick(): Exec {
    this._textStr = 'Mouse middle click';

    return new Exec(this);
  }

  /**
   * Double-clicks with left mouse key.
   *
   * @return {Exec}
   */
  mouseDoubleLeftClick(): Exec {
    this._textStr = 'Mouse double left click';

    return new Exec(this);
  }

  /**
   * Double-clicks with right mouse key.
   *
   * @return {Exec}
   */
  mouseDoubleRightClick(): Exec {
    this._textStr = 'Mouse double right click';

    return new Exec(this);
  }

  /**
   * Double-clicks with middle mouse key.
   *
   * @return {Exec}
   */
  mouseDoubleMiddleClick(): Exec {
    this._textStr = 'Mouse double middle click';

    return new Exec(this);
  }

  /**
   * Toggles mouse down (Left mouse key).
   *
   * @return {Exec}
   */
  mouseToggleDown(): Exec {
    this._textStr = 'Mouse toggle down';

    return new Exec(this);
  }

  /**
   * Toggles mouse up (Left mouse key).
   *
   * @return {Exec}
   */
  mouseToggleUp(): Exec {
    this._textStr = 'Mouse toggle up';

    return new Exec(this);
  }

  /**
   * Press three keys like `CTRL+ALT+DEL`
   *
   * @param {MODIFIER_KEY} first_key - A modifier key
   * @param {MODIFIER_KEY} second_key - A modifier key
   * @param {PC_KEY} third_key - A key
   *
   * @return {Exec}
   */
  pressThreeKeys(first_key: MODIFIER_KEY, second_key: MODIFIER_KEY, third_key: PC_KEY): Exec {
    this._textStr = `Press key ${first_key} ${second_key} ${third_key}`;

    return new Exec(this);
  }

  /**
   * Press two keys like `ALT+F4`
   *
   * @param {MODIFIER_KEY} first_key - A modifier key
   * @param {PC_KEY} second_key - A key
   *
   * @return {Exec}
   */
  pressTwoKeys(first_key: MODIFIER_KEY, second_key: PC_KEY): Exec {
    this._textStr = `Press key ${first_key} ${second_key}`;

    return new Exec(this);
  }

  /**
   * Press one keys like `DEL`
   *
   * @param {PC_AND_MODIFIER_KEY} key - A key
   *
   * @return {Exec}
   */
  pressKey(key: PC_AND_MODIFIER_KEY): Exec {
    this._textStr = `Press key ${key}`;

    return new Exec(this);
  }

  /**
   * Press three Android keys like `CTRL+ALT+DEL`
   *
   * @param {ANDROID_KEY} first_key - A Android key
   * @param {ANDROID_KEY} second_key - A Android key
   * @param {ANDROID_KEY} third_key - A Android key
   *
   * @return {Exec}
   */
  pressAndroidThirdKey(first_key: ANDROID_KEY, second_key: ANDROID_KEY, third_key: ANDROID_KEY): Exec {
    this._textStr = `Press android key ${first_key} ${second_key} ${third_key}`;

    return new Exec(this);
  }

  /**
   * Press two Android keys like `ALT+F4`
   *
   * @param {ANDROID_KEY} first_key - A Android key
   * @param {ANDROID_KEY} second_key - A Android key
   *
   * @return {Exec}
   */
  pressAndroidTwoKey(first_key: ANDROID_KEY, second_key: ANDROID_KEY): Exec {
    this._textStr = `Press android key ${first_key} ${second_key}`;

    return new Exec(this);
  }

  /**
   * Press one Android keys like `DEL`
   *
   * @param {ANDROID_KEY} key - A Android key
   *
   * @return {Exec}
   */
  pressAndroidKey(key: ANDROID_KEY): Exec {
    this._textStr = `Press android key ${key}`;

    return new Exec(this);
  }

  abstract fluentCommandExecutor(
    instruction: string,
    customElements: CustomElementJson[],
  ): Promise<void>;
}

// Getters
export interface ExecutableGetter {
  exec(): Promise<DetectedElement[]>
}

export class ExecGetter extends FluentBase implements ExecutableGetter {
  exec(): Promise<DetectedElement[]> {
    return this.getterStringBuilder();
  }
}
// Filters

export class FluentFiltersGetter extends FluentBase {
  /**
   * Filters for a UI element 'textfield'.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  textfield(): FluentFiltersOrRelationsGetter {
    this._textStr = 'textfield';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for a UI element 'table'.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  table(): FluentFiltersOrRelationsGetter {
    this._textStr = 'table';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for a UI element 'switch'.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  switch(): FluentFiltersOrRelationsGetter {
    this._textStr = 'switch';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for a UI element 'logo'.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  logo(): FluentFiltersOrRelationsGetter {
    this._textStr = 'logo';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for a UI element 'image'.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  image(): FluentFiltersOrRelationsGetter {
    this._textStr = 'image';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for a UI element 'container'.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  container(): FluentFiltersOrRelationsGetter {
    this._textStr = 'container';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for a UI element 'unknown'.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  unknown(): FluentFiltersOrRelationsGetter {
    this._textStr = 'unknown';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for an UI element 'button'.
   *
   * **Examples:**
   * ```typescript
   * await aui.moveMouseTo().button().exec()
   * ```
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  button(): FluentFiltersOrRelationsGetter {
    this._textStr = 'button';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for an UI element 'text'.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  text(): FluentFiltersOrRelationsGetter {
    this._textStr = 'text';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for an UI element 'icon'.
   *
   * You can combine it with the 'withText' command to look for a specific icon.
   *
   * **Examples:**
   * ```typescript
   * icon().withText('plus')
   * ```
   *
   * Note: This is an alpha feature. The prediction of the icon name is sometimes unstable. Use custom elements as an alternative.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  icon(): FluentFiltersOrRelationsGetter {
    this._textStr = 'icon';

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for a custom UI element (see {@link CustomElementJson}).
   *
   * **Important**: This increases the runtime quite a bit. So
   *  only use it when absolutely necessary.
   *
   * @param {CustomElementJson} customElement - The custom element to filter for.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  customElement(customElement: CustomElementJson): FluentFiltersOrRelationsGetter {
    this._textStr = 'custom element';
    this._params.set('customElement', customElement);

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for similar (doesn't need to be a 100% equal) text.
   *
   * **Examples:**
   * ```typescript
   * 'text' === withText('text') => true
   * 'test' === withText('text') => true
   * 'Test' === withText('text') => true
   * 'Text' === withText('text') => true
   * 'TEXT' === withText('text') => true
   * 'texst' === withText('text') => true
   * 'texts' === withText('text') => true
   *
   * // usually false
   * 'atebxtc' === withText('text') => false
   * 'other' === withText('text') => false
   * ```
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  withText(text: string): FluentFiltersOrRelationsGetter {
    this._textStr = `with text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for texts, which match the regex pattern.
   *
   * **Examples:**
   *
   * ```typescript
   * 'The rain in Spain' === withTextRegex('\b[Ss]\w+') => true
   * 'The rain in Portugal' === withTextRegex('\b[Ss]\w+') => false
   * 'The rain in switzerland' === withTextRegex('\b[Ss]\w+') => true
   *
   * await aui.get().text().withTextRegex('\b[Ss]\w+').exec()
   * ```
   *
   * @param {string} regex_pattern - A regex pattern
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  withTextRegex(regex_pattern: string): FluentFiltersOrRelationsGetter {
    this._textStr = `match regex pattern ${Separators.STRING}${regex_pattern}${Separators.STRING}`;

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for equal text.
   *
   * **Note:** This should be only used in cases where the similarity
   *  comparison of {@link FluentFilters.withText()} allows not for
   *  specific enough filtering (too many elements).
   *
   * **Examples:**
   * ```typescript
   * 'text' === withExactText('text') => true
   * 'test' === withExactText('text') => false
   * 'other' === withExactText('text') => false
   *
   * await aui.moveMouseTo().text().withExactText('Password').exec()
   * ```
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  withExactText(text: string): FluentFiltersOrRelationsGetter {
    this._textStr = `equals text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for text containing the text provided as an argument.
   *
   * **Examples:**
   * ```typescript
   * 'This is an text' === containsText('text') => true
   * 'This is an text' === containsText('other text') => false
   * 'This is an text' === containsText('other') => false
   * ```
   * ![](https://docs.askui.com/img/gif/containsText.gif)
   *
   * @param {string} text - A text to be matched.
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  containsText(text: string): FluentFiltersOrRelationsGetter {
    this._textStr = `contain text ${Separators.STRING}${text}${Separators.STRING}`;

    return new FluentFiltersOrRelationsGetter(this);
  }

  /**
   * Filters for elements having a specific color.
   *
   * @param {COLOR} color - A color to match
   *
   * @return {FluentFiltersOrRelationsGetter}
   */
  colored(color: COLOR): FluentFiltersOrRelationsGetter {
    this._textStr = `with color ${color}`;

    return new FluentFiltersOrRelationsGetter(this);
  }
}

// Relations

export class FluentFiltersOrRelationsGetter extends FluentFiltersGetter {
  /**
   * Logic or operator
   *
   * **Examples:**
   * ```text
   * scene 1
   * --------------  ---------------
   * |  button    |  |  icon       |
   * --------------  ---------------
   *
   * scene 2
   * --------------  ---------------
   * |  button    |  |  text       |
   * --------------  ---------------
   *
   * ```
   * In case, that your reference element can have multiple values, in the following example, the element right of the button can be either icon or text.
   * You can use **the `or()` relation**, so your teststep is valid for both scenes
   * ```typescript
   * const button = await aui.get().button().rightOf().icon().or().text().exec();
   * console.log(button);
   * ```
   * Returns the same button for both cases
   * ```text
   *  console output: [
   *   DetectedElement {
   *      name: 'BUTTON',
   *      text: 'button',
   *      colors: [ 'red', 'black', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   *
   * @return {FluentFiltersGetter}
   */
  or(): FluentFiltersGetter {
    this._textStr = 'or';

    return new FluentFiltersGetter(this);
  }

  /**
   * Logic and operator
   *
   * **Examples:**
   * ```text
   * example scene:
   *  --------------------------   --------------------------
   *  |  icon user colored black | |  icon  user colored red |
   *  --------------------------   --------------------------
   * ```
   * ```typescript
   * const icons = await aui.get().icon().withText('user').exec();
   * console.log(icons);
   * ```
   * Using only the filter withText, the get command will return both icons because they share the same text
   * ```text
   * console output: [
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'black', 'black', 'black' ],
   *      bndbox: BoundingBox {
   *         xmin: 1000,
   *         ymin: 1010,
   *         xmax: 1020,
   *         ymax: 1030
   *      }
   *   },
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'red', 'red', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   * You can combine filters with **the `and()` relation** and specify exactly which icon you want
   * ```typescript
   * const icons = await aui.get().icon().withText('user').and().colored('red').exec()
   * console.log(icons)
   * ```
   * The get command returns only the red icon although both icons have the same text
   * ```text
   *  console output: [
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'user',
   *      colors: [ 'red', 'red', 'red' ],
   *      bndbox: BoundingBox {
   *         xmin: 900,
   *         ymin: 910,
   *         xmax: 920,
   *         ymax: 930
   *      }
   *   }
   *  ]
   * ```
   *
   * @return {FluentFiltersGetter}
   */
  and(): FluentFiltersGetter {
    this._textStr = 'and';

    return new FluentFiltersGetter(this);
  }

  /**
   * Filters for an element inside another element.
   *
   * **Examples:**
   * ```typescript
   * --------------------
   * |     outerEl      |
   * |  --------------  |
   * |  |  innerEl   |  |
   * |  --------------  |
   * |                  |
   * --------------------
   *
   * // Returns innerEl because innerEl is inside outerEl
   * ...innerEl().in().outerEl()
   * // Returns nothing because innerEl is not inside outerEl
   * ...outerEl().in().innerEl()
   * ```
   * ![](https://docs.askui.com/img/gif/in.gif)
   *
   * @return {FluentFiltersGetter}
   */
  in(): FluentFiltersGetter {
    this._textStr = 'in';

    return new FluentFiltersGetter(this);
  }

  /**
   * Filters for an element right of another element.
   *
   * **Examples:**
   * ```typescript
   * --------------  --------------
   * |  leftEl    |  |  rightEl   |
   * --------------  --------------
   *
   * // Returns rightEl because rightEl is right of leftEl
   * ...rightEl().rightOf().leftEl()
   * // Returns no element because leftEl is left of rightEl
   * ...leftEl().rightOf().rightEl()
   * ```
   * ![](https://docs.askui.com/img/gif/rightOf.gif)
   *
   * @return {FluentFiltersGetter}
   */
  rightOf(): FluentFiltersGetter {
    this._textStr = 'right of';

    return new FluentFiltersGetter(this);
  }

  /**
   * Filters for an element left of another element.
   *
   * **Examples:**
   * ```typescript
   * --------------  --------------
   * |  leftEl    |  |  rightEl   |
   * --------------  --------------
   *
   * // Returns leftEl because leftEl is left of rightEl
   * ...leftEl().leftOf().rightEl()
   * // Returns no element because rightEl is left of leftEl
   * ...rightEl().leftOf().leftEl()
   * ```
   * ![](https://docs.askui.com/img/gif/leftOf.gif)
   *
   * @return {FluentFiltersGetter}
   */
  leftOf(): FluentFiltersGetter {
    this._textStr = 'left of';

    return new FluentFiltersGetter(this);
  }

  /**
   * Filters for an element below another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |    text    |
   * --------------
   * --------------
   * |   button   |
   * --------------
   *
   * // Returns button because button is below text
   * ...button().below().text()
   * // Returns no element because text is above button
   * ...text().below().button()
   * ```
   * ![](https://docs.askui.com/img/gif/below.gif)
   *
   * @return {FluentFiltersGetter}
   */
  below(): FluentFiltersGetter {
    this._textStr = 'below';

    return new FluentFiltersGetter(this);
  }

  /**
   * Filters for an element above another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |    text    |
   * --------------
   * --------------
   * |   button   |
   * --------------
   *
   * // Returns text because text is above button
   * ...text().above().button()
   * // Returns no element because button is below text
   * ...button().above().text()
   * ```
   * ![](https://docs.askui.com/img/gif/above.gif)
   *
   * @return {FluentFiltersGetter}
   */
  above(): FluentFiltersGetter {
    this._textStr = 'above';

    return new FluentFiltersGetter(this);
  }

  /**
   * Filters for an element nearest to another element.
   *
   * **Examples:**
   * ```typescript
   * --------------
   * |  button 1  |
   * --------------
   * --------------
   * |   text     |
   * --------------
   *
   *
   *
   * --------------
   * |  button 2  |
   * --------------
   *
   * // Returns button 1 because button 1 is nearer to the text than button 2
   * ...button().nearestTo().text()
   * ```
   * ![](https://docs.askui.com/img/gif/nearestTo.gif)
   *
   * @return {FluentFiltersGetter}
   */
  nearestTo(): FluentFiltersGetter {
    this._textStr = 'nearest to';

    return new FluentFiltersGetter(this);
  }

  /**
   * Filters for an element containing another element.
   *
   * **Example:**
   * ```typescript
   * --------------------
   * |     outerEl      |
   * |  --------------  |
   * |  |  innerEl   |  |
   * |  --------------  |
   * |                  |
   * --------------------
   *
   * // Returns outerEl because outerEl contains innerEl
   * ...outerEl().contains().innerEl()
   * //  Returns no element because innerEl contains no outerEl
   * ...innerEl().contains().outerEl()
   * ```
   * ![](https://docs.askui.com/img/gif/contains.gif)
   *
   * @return {FluentFiltersGetter}
   */
  contains(): FluentFiltersGetter {
    this._textStr = 'contains';

    return new FluentFiltersGetter(this);
  }

  /**
  * Returns a list of detected elements
  *
  * @return {DetectedElement[]}
  */
  exec(): Promise<DetectedElement[]> {
    return this.getterStringBuilder();
  }
}

// Commands
export abstract class Getter extends FluentCommand {
  /**
   * Returns an array with all filtered elements.
   * A detected element has the following properties:
   * - `name` of the element
   * - `text` content of element
   * - `colors` of element
   * - `bndbox`: location of element described with coordinates of a bounding box
   *
   * **Examples:**
   * ```typescript
   * const text = await aui.get().text().withText('Sign').exec();
   * console.log(text);
   * ```
   * ```text
   *  console output: [
   *   DetectedElement {
   *      name: 'TEXT',
   *      text: 'Sign In',
   *      colors: [ 'black', 'gray', 'gray' ],
   *      bndbox: BoundingBox {
   *         xmin: 1128.2720982142857,
   *         ymin: 160.21332310267857,
   *         xmax: 1178.8204241071428,
   *         ymax: 180.83512834821428
   *      }
   *  }
   *  ]
   * ```
   *
   * @return {FluentFiltersGetter}
   */
  get(): FluentFiltersGetter {
    this._textStr = 'get element';

    return new FluentFiltersGetter(this);
  }

  /**
   * Returns an array with all detected elements.
   * A detected element has the following properties:
   * - `name` of the element
   * - `text` content of element
   * - `colors` of element
   * - `bndbox`: location of element described with coordinates of a bounding box
   *
   * **Examples:**
   * ```typescript
   * const detectedElements = await aui.getAll().exec();
   * console.log(detectedElements);
   * ```
   * ```text
   *  console output: [
   *   DetectedElement {
   *      name: 'TEXT',
   *      text: 'Sign In',
   *      colors: [ 'black', 'gray', 'gray' ],
   *      bndbox: BoundingBox {
   *         xmin: 1128.2720982142857,
   *         ymin: 160.21332310267857,
   *         xmax: 1178.8204241071428,
   *         ymax: 180.83512834821428
   *      },
   *   DetectedElement {
   *      name: 'ICON',
   *      text: 'search',
   *      colors: [ 'black', 'red', 'gray' ],
   *      bndbox: BoundingBox {
   *         xmin: 250.8204241071428,
   *         ymin: 300.21332310267857,
   *         xmax: 450.6304241071428,
   *         ymax: 950.47812834821428
   *      },
   *      ... 381 more items
   *  }
   *  ]
   * ```
   *
   * @return {ExecGetter}
   */
  getAll(): ExecGetter {
    this._textStr = 'get all elements';

    return new ExecGetter(this);
  }

  abstract getterExecutor(
    instruction: string,
    customElements: CustomElementJson[],
  ): Promise<DetectedElement[]>;
}

export abstract class ApiCommands extends Getter { }
